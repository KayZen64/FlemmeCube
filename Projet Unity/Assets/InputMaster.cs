//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Joueur"",
            ""id"": ""35aa0b3f-0a58-45bc-be4c-9f8a9eb3612d"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f79334b2-2262-49ac-adb8-2e1babea89c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Invisibility"",
                    ""type"": ""Button"",
                    ""id"": ""daac7d4f-d6c8-4e2e-a19f-9eff163c9e20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause menu"",
                    ""type"": ""Button"",
                    ""id"": ""e509e19e-7ecd-4a01-b63c-9e5eac66157d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d9d7a4d7-5b13-4216-a8f1-d9640cd6e21d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05572bd5-82a8-491e-a8d7-4fa4f686d320"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27f4ac2a-b051-4fe3-a905-d35e6f7145ab"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19fcd02a-e3a1-48ca-8d41-656c25c7a071"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b4b580c-04bf-4f9f-81b0-b98b110d0a15"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f519a156-cfc6-44fa-a014-972ee776f4cb"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Invisibility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3745c529-8d33-4a7a-b86a-4186ab6c9214"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Invisibility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b018382-47e4-43ff-9c7c-dde6d6520e42"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Pause menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6d87477-16ba-417d-8b80-94ff3d2df2e2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Pause menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b9e6187b-ab9b-407c-8fc6-9c2e440ccf8f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6232beed-eae3-483a-abb1-54ef30fe9b3d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b5572be7-5214-4cec-9072-5b1f760fcd65"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""16862f22-748f-4c06-a2d7-648224abbfc7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cc532f4c-a07d-4eee-83f9-14970a226d39"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bac0afc9-2917-4ec7-b9f4-7c5b428053c0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""77a059b0-f546-4e03-b588-4a12bee3bbb5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""93a2b189-18ff-4f2b-92f3-e3d5176a5e77"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f68d28f5-cd36-441b-a3d5-d08bd721c3cd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier souris"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Clavier souris"",
            ""bindingGroup"": ""Clavier souris"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Manette"",
            ""bindingGroup"": ""Manette"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Joueur
        m_Joueur = asset.FindActionMap("Joueur", throwIfNotFound: true);
        m_Joueur_Jump = m_Joueur.FindAction("Jump", throwIfNotFound: true);
        m_Joueur_Invisibility = m_Joueur.FindAction("Invisibility", throwIfNotFound: true);
        m_Joueur_Pausemenu = m_Joueur.FindAction("Pause menu", throwIfNotFound: true);
        m_Joueur_Move = m_Joueur.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Joueur
    private readonly InputActionMap m_Joueur;
    private IJoueurActions m_JoueurActionsCallbackInterface;
    private readonly InputAction m_Joueur_Jump;
    private readonly InputAction m_Joueur_Invisibility;
    private readonly InputAction m_Joueur_Pausemenu;
    private readonly InputAction m_Joueur_Move;
    public struct JoueurActions
    {
        private @InputMaster m_Wrapper;
        public JoueurActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Joueur_Jump;
        public InputAction @Invisibility => m_Wrapper.m_Joueur_Invisibility;
        public InputAction @Pausemenu => m_Wrapper.m_Joueur_Pausemenu;
        public InputAction @Move => m_Wrapper.m_Joueur_Move;
        public InputActionMap Get() { return m_Wrapper.m_Joueur; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoueurActions set) { return set.Get(); }
        public void SetCallbacks(IJoueurActions instance)
        {
            if (m_Wrapper.m_JoueurActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_JoueurActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_JoueurActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_JoueurActionsCallbackInterface.OnJump;
                @Invisibility.started -= m_Wrapper.m_JoueurActionsCallbackInterface.OnInvisibility;
                @Invisibility.performed -= m_Wrapper.m_JoueurActionsCallbackInterface.OnInvisibility;
                @Invisibility.canceled -= m_Wrapper.m_JoueurActionsCallbackInterface.OnInvisibility;
                @Pausemenu.started -= m_Wrapper.m_JoueurActionsCallbackInterface.OnPausemenu;
                @Pausemenu.performed -= m_Wrapper.m_JoueurActionsCallbackInterface.OnPausemenu;
                @Pausemenu.canceled -= m_Wrapper.m_JoueurActionsCallbackInterface.OnPausemenu;
                @Move.started -= m_Wrapper.m_JoueurActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_JoueurActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_JoueurActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_JoueurActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Invisibility.started += instance.OnInvisibility;
                @Invisibility.performed += instance.OnInvisibility;
                @Invisibility.canceled += instance.OnInvisibility;
                @Pausemenu.started += instance.OnPausemenu;
                @Pausemenu.performed += instance.OnPausemenu;
                @Pausemenu.canceled += instance.OnPausemenu;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public JoueurActions @Joueur => new JoueurActions(this);
    private int m_ClaviersourisSchemeIndex = -1;
    public InputControlScheme ClaviersourisScheme
    {
        get
        {
            if (m_ClaviersourisSchemeIndex == -1) m_ClaviersourisSchemeIndex = asset.FindControlSchemeIndex("Clavier souris");
            return asset.controlSchemes[m_ClaviersourisSchemeIndex];
        }
    }
    private int m_ManetteSchemeIndex = -1;
    public InputControlScheme ManetteScheme
    {
        get
        {
            if (m_ManetteSchemeIndex == -1) m_ManetteSchemeIndex = asset.FindControlSchemeIndex("Manette");
            return asset.controlSchemes[m_ManetteSchemeIndex];
        }
    }
    public interface IJoueurActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnInvisibility(InputAction.CallbackContext context);
        void OnPausemenu(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
